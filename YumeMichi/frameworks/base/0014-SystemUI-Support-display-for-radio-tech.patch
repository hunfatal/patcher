From 51c19bbfac8694b0d67d79ede72f4362e34988b6 Mon Sep 17 00:00:00 2001
From: Shufeng Hou <shou@codeaurora.org>
Date: Thu, 26 Nov 2015 16:03:53 +0800
Subject: [PATCH 14/20] SystemUI: Support display for radio tech

included:
From: Wileen Chiu <wileenc@codeaurora.org>
Date: Thu, 1 Dec 2016 08:12:26 +0800

SystemUI: Provide correct resource type
- The value stored for when the network
class is unknown is 0. We attempt to get
the resource for this value, which doesn't exist,
resulting in a crash
- Store an empty string for when the
network class is unknown, which is also the
default value.

xyyx: extracted and cleaned

Change-Id: I70849db7f982313d447c629133e10401b404da3a
Signed-off-by: xyyx <xyyx@mail.ru>
---
 core/res/res/values/lineage_config.xml             |  8 ++++
 core/res/res/values/lineage_symbols.xml            |  8 ++++
 .../src/com/android/keyguard/CarrierText.java      | 51 ++++++++++++++++++++++
 3 files changed, 67 insertions(+)

diff --git a/core/res/res/values/lineage_config.xml b/core/res/res/values/lineage_config.xml
index 3086d5b..ba8cd73 100644
--- a/core/res/res/values/lineage_config.xml
+++ b/core/res/res/values/lineage_config.xml
@@ -23,6 +23,14 @@
     <integer name="config_LTE_antenna_bar_quantity_metric">0</integer>
     <integer name="config_LTE_RSRP_threshold_type">0</integer>
 
+    <!-- display for radio tech -->
+    <bool name="config_display_rat">true</bool>
+    <!-- config 2G/3G/4G RAT strings for carriers -->
+    <string name="config_rat_unknown" translatable="false">""</string>
+    <string name="config_rat_2g" translatable="false">2G</string>
+    <string name="config_rat_3g" translatable="false">3G</string>
+    <string name="config_rat_4g" translatable="false">4G</string>
+
     <!-- Button backlight -->
     <integer name="config_buttonBrightnessSettingDefault">255</integer>
     <bool name="config_deviceHasVariableButtonBrightness">false</bool>
diff --git a/core/res/res/values/lineage_symbols.xml b/core/res/res/values/lineage_symbols.xml
index 035323f..2a510c4 100644
--- a/core/res/res/values/lineage_symbols.xml
+++ b/core/res/res/values/lineage_symbols.xml
@@ -19,6 +19,14 @@
     <java-symbol type="integer" name="config_LTE_antenna_bar_quantity_metric" />
     <java-symbol type="integer" name="config_LTE_RSRP_threshold_type" />
 
+    <!-- display for radio tech -->
+    <java-symbol type="bool" name="config_display_rat" />
+    <!-- config 2G/3G/4G RAT strings for carriers -->
+    <java-symbol type="string" name="config_rat_unknown" />
+    <java-symbol type="string" name="config_rat_2g" />
+    <java-symbol type="string" name="config_rat_3g" />
+    <java-symbol type="string" name="config_rat_4g" />
+
     <!-- ADB notification -->
     <java-symbol type="string" name="adb_net_active_notification_title" />
     <java-symbol type="string" name="adb_both_active_notification_title" />
diff --git a/packages/SystemUI/src/com/android/keyguard/CarrierText.java b/packages/SystemUI/src/com/android/keyguard/CarrierText.java
index 66475e2..9cf03a0 100644
--- a/packages/SystemUI/src/com/android/keyguard/CarrierText.java
+++ b/packages/SystemUI/src/com/android/keyguard/CarrierText.java
@@ -28,6 +28,7 @@ import android.net.ConnectivityManager;
 import android.net.wifi.WifiManager;
 import android.telephony.ServiceState;
 import android.telephony.SubscriptionInfo;
+import android.telephony.TelephonyManager;
 import android.text.TextUtils;
 import android.text.method.SingleLineTransformationMethod;
 import android.util.AttributeSet;
@@ -167,14 +168,51 @@ public class CarrierText extends TextView {
         boolean allSimsMissing = true;
         boolean anySimReadyAndInService = false;
         CharSequence displayText = null;
+        boolean showRat = getContext().getResources().getBoolean(
+                com.android.internal.R.bool.config_display_rat);
 
         List<SubscriptionInfo> subs = mKeyguardUpdateMonitor.getSubscriptionInfo(false);
         final int N = subs.size();
         if (DEBUG) Log.d(TAG, "updateCarrierText(): " + N);
         for (int i = 0; i < N; i++) {
+            CharSequence networkClass = "";
             int subId = subs.get(i).getSubscriptionId();
             State simState = mKeyguardUpdateMonitor.getSimState(subId);
+            if (showRat) {
+                ServiceState ss = mKeyguardUpdateMonitor.mServiceStates.get(subId);
+                if (ss != null && (ss.getDataRegState() == ServiceState.STATE_IN_SERVICE
+                        || ss.getVoiceRegState() == ServiceState.STATE_IN_SERVICE)) {
+                    int networkType = TelephonyManager.NETWORK_TYPE_UNKNOWN;
+                    if (ss.getRilDataRadioTechnology() !=
+                            ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN) {
+                        networkType = ss.getDataNetworkType();
+                    } else if (ss.getRilVoiceRadioTechnology() !=
+                                ServiceState.RIL_RADIO_TECHNOLOGY_UNKNOWN) {
+                        networkType = ss.getVoiceNetworkType();
+                    }
+                    networkClass = networkClassToString(TelephonyManager
+                            .getNetworkClass(networkType));
+                }
+            }
             CharSequence carrierName = subs.get(i).getCarrierName();
+            if (showRat && !TextUtils.isEmpty(carrierName)) {
+                String[] names = carrierName.toString().split(mSeparator.toString(), 2);
+                StringBuilder newCarrierName = new StringBuilder();
+                for (int j = 0; j < names.length; j++) {
+                    if (!TextUtils.isEmpty(names[j])) {
+                        if (!TextUtils.isEmpty(networkClass) && showRat) {
+                            names[j] = new StringBuilder().append(names[j]).append(" ")
+                                    .append(networkClass).toString();
+                        }
+                        if (j > 0 && names[j].equals(names[j-1])) {
+                            continue;
+                        }
+                        if (j > 0) newCarrierName.append(mSeparator);
+                        newCarrierName.append(names[j]);
+                    }
+                }
+                carrierName = newCarrierName.toString();
+            }
             CharSequence carrierTextForSimState = getCarrierTextForSimState(simState, carrierName);
             if (DEBUG) {
                 Log.d(TAG, "Handling (subId=" + subId + "): " + simState + " " + carrierName);
@@ -479,4 +517,17 @@ public class CarrierText extends TextView {
             return source;
         }
     }
+
+    private String networkClassToString (int networkClass) {
+        final int[] classIds =
+            {com.android.internal.R.string.config_rat_unknown, // TelephonyManager.NETWORK_CLASS_UNKNOWN
+            com.android.internal.R.string.config_rat_2g,
+            com.android.internal.R.string.config_rat_3g,
+            com.android.internal.R.string.config_rat_4g };
+        String classString = null;
+        if (networkClass < classIds.length) {
+            classString = getContext().getResources().getString(classIds[networkClass]);
+        }
+        return (classString == null) ? "" : classString;
+    }
 }
-- 
2.7.4

